/*
COLORS:
Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485
*/
/* Universal Selector */
/* resetting */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
  /*it forces the inheritance */ }

/* root */
html {
  font-size: 62.5%; }

/* For inheritance: they will be all inherited to child element */
body {
  font-family: 'Lato', sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777777;
  padding: 3rem;
  /* (top right bottom left) It will not get inherited. It is only for the body element */
  box-sizing: border-box; }

.header {
  height: 95vh;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  /* two images => one is gradient color and below that actual image */
  background-size: cover;
  /* to cover the available width */
  background-position: top;
  /* to always position our image to top */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /* clipping only needed portion => (left top, right top, right bottom , left bottom) */
  position: relative;
  /* It will not affect the position but will be reference to its child element */ }

.header__logo-box {
  position: absolute;
  /* It basically reference to its parent element and then we can add top, left, right, position */
  top: 4rem;
  left: 4rem; }

.header__logo {
  height: 3.5rem; }

.header__text-box {
  position: absolute;
  top: 40%;
  /* It will put actually 40% from the top of its parent element */
  left: 50%;
  /* It will put actually 50% from the left of its parent element */
  transform: translate(-50%, -50%);
  /* It will shift -50% of its left and -50% of its top, not of its parent element */
  text-align: center; }

.heading-primary {
  color: #ffffff;
  text-transform: uppercase;
  backface-visibility: hidden;
  /* Determines if the back part of an element eg. transform is visible or hidden */
  margin-bottom: 6rem; }

.heading-primary--main {
  display: block;
  /* block basically occupies entire width available to it and created line-break before and after them */
  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem;
  animation-name: moveInLeft;
  /* animation name */
  animation-duration: 3s;
  /* time taken for an animation */
  animation-timing-function: ease-out;
  /* it specifies the speed curve of an animation */
  /* 
  animation-iteration-count: 3;
  animation-delay: 1s;
   */ }

@keyframes moveInLeft {
  /* Initial State */
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  /* Final State */
  100% {
    opacity: 1;
    transform: translate(0); } }

.heading-primary--sub {
  display: block;
  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 1.75rem;
  animation: moveInRight 1s ease-in-out;
  /* animation-name animation-delay animation-timing-function: */ }

@keyframes moveInRight {
  /* Initial State */
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  /* Final State */
  100% {
    opacity: 1;
    transform: translate(0); } }

.btn:link, .btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  /* top-bottom left-right */
  display: inline-block;
  /* displayed as an inline element but can be styled as a block level element*/
  border-radius: 10rem;
  transition: all 0.2s ease-in-out;
  /* 
  another animation property(simplest one) 
  all stands for all properties will get transition effect transition-duration 
  transition-timing-function 
  */
  position: relative;
  font-size: 1.6rem; }

.btn:hover {
  transform: translateY(-0.3rem);
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
  /* x-axis y-axis blur color */ }

.btn:active {
  transform: translateY(-0.1rem);
  /* It is in relation to initial state not hover state */
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }

.btn--white {
  background-color: #ffffff;
  color: #777777; }

.btn::after {
  /* It is now treated as the child of actual button */
  content: '';
  /* always required */
  display: inline-block;
  height: 100%;
  /* 100% height of actual button */
  width: 100%;
  /* 100% width of actual button */
  border-radius: 10rem;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  /* 
  z-index property specifies the stack order of an element.
  Here, -1 so it is behind the actual button
  */
  transition: all 0.4s; }

.btn--white::after {
  background-color: #ffffff; }

.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  /* scale will increase an entire element, scale(2) means double of an actual element */
  opacity: 0;
  /* it will sets an element as invisible*/ }

.btn--animated {
  animation: moveInBottom 0.5s ease-out 0.75s;
  animation-fill-mode: backwards;
  /* It will automatically apply the style of 0% before the animation starts */ }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translateY(0); } }
