@keyframes moveInLeft {
  /* Initial State */
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  /* Final State */
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  /* Initial State */
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  /* Final State */
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translateY(0); } }

/* Universal Selector */
/* resetting */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
  /*it forces the inheritance */ }

/* root */
html {
  font-size: 62.5%; }

/* For inheritance: they will be all inherited to child element */
body {
  box-sizing: border-box; }

/* For inheritance: they will be all inherited to child element */
body {
  font-family: 'Lato', sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777777;
  padding: 3rem;
  /* (top right bottom left) It will not get inherited. It is only for the body element */ }

.heading-primary {
  color: #ffffff;
  text-transform: uppercase;
  backface-visibility: hidden;
  /* Determines if the back part of an element eg. transform is visible or hidden */
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    /* block basically occupies entire width available to it and created line-break before and after them */
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    /* animation name */
    animation-duration: 3s;
    /* time taken for an animation */
    animation-timing-function: ease-out;
    /* it specifies the speed curve of an animation */
    /* 
      animation-iteration-count: 3;
      animation-delay: 1s;
       */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 1s ease-in-out;
    /* animation-name animation-delay animation-timing-function: */ }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  display: inline-block;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  -webkit-background-clip: text;
  /* for text gradient color */
  color: transparent;
  letter-spacing: 0.2rem;
  transition: all 0.2s; }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(15deg);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2);
    /* text shadow (x-axis, y-axis, blur, color) */ }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

.u-center-text {
  text-align: center; }

.u-margin-bottom-small {
  margin-bottom: 1.5rem; }

.u-margin-bottom-medium {
  margin-bottom: 4rem; }

.u-margin-bottom-big {
  margin-bottom: 8rem; }

.btn:link, .btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  /* top-bottom left-right */
  display: inline-block;
  /* displayed as an inline element but can be styled as a block level element*/
  border-radius: 10rem;
  transition: all 0.2s ease-in-out;
  /* 
          another animation property(simplest one) 
          all stands for all properties will get transition effect transition-duration 
          transition-timing-function 
          */
  position: relative;
  font-size: 1.6rem; }

.btn:hover {
  transform: translateY(-0.3rem);
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
  /* x-axis y-axis blur color */ }
  .btn:hover::after {
    transform: scaleX(1.4) scaleY(1.6);
    /* scale will increase an entire element, scale(2) means double of an actual element */
    opacity: 0;
    /* it will sets an element as invisible*/ }

.btn:active {
  transform: translateY(-0.1rem);
  /* It is in relation to initial state not hover state */
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }

.btn--white {
  background-color: #ffffff;
  color: #777777; }
  .btn--white::after {
    background-color: #ffffff; }

.btn::after {
  /* It is now treated as the child of actual button */
  content: '';
  /* always required */
  display: inline-block;
  height: 100%;
  /* 100% height of actual button */
  width: 100%;
  /* 100% width of actual button */
  border-radius: 10rem;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  /* 
      z-index property specifies the stack order of an element.
      Here, -1 so it is behind the actual button
      */
  transition: all 0.4s; }

.btn--animated {
  animation: moveInBottom 0.5s ease-out 0.75s;
  animation-fill-mode: backwards;
  /* It will automatically apply the style of 0% before the animation starts */ }

.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #55c57a;
  display: inline-block;
  text-decoration: none;
  border-bottom: 1px solid #55c57a;
  padding: 3px;
  transition: all 0.2s; }

.btn-text:hover {
  background-color: #55c57a;
  color: #ffffff;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-2px); }

.btn-text:active {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  transform: translateY(0); }

.composition {
  position: relative; }
  .composition__photo {
    width: 55%;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
    border-radius: 2px;
    position: absolute;
    z-index: 10;
    transition: all 0.2s;
    outline-offset: 2rem; }
    .composition__photo--p1 {
      left: 0;
      top: -2rem; }
    .composition__photo--p2 {
      right: 0;
      top: 2rem; }
    .composition__photo--p3 {
      left: 20%;
      top: 10rem; }
    .composition__photo:hover {
      outline: 1.5rem solid #55c57a;
      transform: scale(1.05) translateY(-0.5rem);
      box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
      z-index: 20; }
  .composition:hover .composition__photo:not(:hover) {
    transform: scale(0.95); }

.header {
  height: 95vh;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  /* two images => one is gradient color and below that actual image */
  background-size: cover;
  /* to cover the available width */
  background-position: top;
  /* to always position our image to top */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /* clipping only needed portion => (left top, right top, right bottom , left bottom) */
  position: relative;
  /* It will not affect the position but will be reference to its child element */ }
  .header__logo-box {
    position: absolute;
    /* It basically reference to its parent element and then we can add top, left, right, position */
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    top: 40%;
    /* It will put actually 40% from the top of its parent element */
    left: 50%;
    /* It will put actually 50% from the left of its parent element */
    transform: translate(-50%, -50%);
    /* It will shift -50% of its left and -50% of its top, not of its parent element */
    text-align: center; }

.row {
  max-width: 114rem;
  margin: 0 auto; }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: '';
    display: table;
    clear: both; }
  .row [class^='col-'] {
    float: left; }
    .row [class^='col-']:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4); }
  .row .col-2-of-3 {
    width: calc( 2 * ((100% - 2 * 6rem) / 3) + 6rem); }
  .row .col-2-of-4 {
    width: calc( 2 * ((100% - 3 * 6rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc( 3 * ((100% - 3 * 6rem) / 4) + (2 * 6rem)); }
